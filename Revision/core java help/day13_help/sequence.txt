Revise Hashing algorithm using HashMap
Map API for conversion to Collection view
HashMap implementation for Banking system
More Details about generic syntax
Enter Functional programming in Java , along with Java 8 new features

NOTE : Hashing algo in HashSet or HashMap is same
HashSet internally maintains HashMap instance (HashSet HAS-A HashMap)
eg : HashSet<Emp> --> HashMap <Emp,Object>
i.e when u call hs.add(e1) --> hm.put(e1,new Object());
hs.remove(e1) ---> hm.remove(e1);




For revision of Hashing algo with HashMap : 
HashMap<K,V> hm=new HM<>();
hm.put(k1,v1);//1st entry added
hm.put(k2,v2);//Given : k1 n k2 have different hashcode => different bucket id
hm.put(k3,v3); //Given : k1 n k3 have same hashcode => same bucket id
hm.put(k1,v4); 
hm.put(k5,v5); //Given : k1 n k5 have same hashcode => same bucket id
hm.put(null,v6);

How will you explain it ? (With mem diagram)





1. Start with a fresh scenario
Banking System
BankAccount : acctNo, customer name , type(enum :SAVING(10000),CURRENT(5000),FD(50000))  , balance , creation date , last tx date , isActive
(Later can add HAS-A relationship ,  BankAccount HAS-A KYC => association
In KYC : customer email , phone no , Aadhar Card No ...) n link KYC info to BakAccount
)

Ctor , toString : for acct summary
withdraw , deposit, funds transfer

Business  Rules 
valid acct type should be chosen
check min balance condition(it's going to differ as per a/c type) 
In case of no txs (withdraw , deposit, funds transfer) , in 1 year ,  disable a/c active status(dormant/inactive account)
If a/c is disabled , bank customer should not be allowed any txs

Options
1. Open new account
2. Get Account summary
3. Withdraw/deposit
4. Transfer Funds
5. Close Account

Assuming BankManager has logged in(later actual authentication n authorization logic can be added)

6. Display all account details
7. Update a/c status of all accounts
8. Sort accounts as per acct no
Try n solve below requirements in the lab (if possible !)
9. Sort a/cs as per account balance
10. Sort a/cs as per a/c type n creation date.





2. More advanced Generic Syntax 
Generic methods
eg : Arrays.asList
(? , extends , super )

Refer to generic sequence



Solve : 
Create Utils class --Add static method
1. Add a method to print all elements from any of the following
 Test cases : AL<String> , LL<Integer> , Vector<LocalDate> , HS<Double> , LHS,TS



1.5 Add a method to count the number of occurrences of elem in any List
(lab work )

	
2. Add a method to find sum of salary of emps from any List 
Test cases : AL<Mgr> ,LL<Worker> , Vector<SM> ....

Explain :
public ArrayListâ€‹(Collection<? extends E> c)
E : Emp 
=>This ctor  creates  : a populated AL , populated from ANY Collection (AL,LL,Vector : no err
HS,LHS,TS : no err
HM,LHM ,TM : err)
having generic type : Emp or it's subtype(eg : Mgr,Worker.....)

------------------------Pending------------------------
	
3. Add a method to hire a sales mgr to the list
What should be the type of the List ?

4. Add a method to hire a temp worker to the list
What should be the type of the List ?


3. Functional programming 
3.1 Java 8 new features
3.3 Lambda expressions
3.3 Higher order functions



eg : Objective 
Find out the average salary of emp from the specified dept.

How will you do it in imperative manner? 
eg : Suppose you have a populated ArrayList of emps : l1: AL<Emp>
sop("Enter dept name");
String dept=sc.next();
double total=0;
int num=0;
for(Emp e : l1)
  if(e.getDept().equals(dept)) {
   total += e.getSal();
   num++;
  }
sop(total/num);



Vs
How to do it in declarative style ?
eg : 
l1.stream().filter(e->e.getDept().equals(dept)).mapToDouble(Emp::getSal).average().getAsDouble();



Revise : 
1. Create your own functional interface n use it in lambda expression

eg : Perform ANY arithmetic operation on 2 double values & return the result
eg --add/multiply/subtract/divide....  ANY such operation !



Explore Existing higher order functions/methods

Copy ready code first.

Solve :  

1.
Display all products (from a product list)
API :  Iterable : forEach 


2. 
Remove all the products of a specific category
Collection : removeIf




3. 
Display all products (from a product map)
Ans this 
Is Map Iterable ?
Can u attach DIRECTLY a for-each loop to the map ? 

Imperative style
for(Product p : map.values())
 sop(p);
Any Declarative (Functional prog solution ?)



4. Sort the products from the list , as per date : custom ordering
How ?





5 Use Function literal


6. Using above API(higher order funcs) , can you chain multiple operations like sorting & displaying the sorted data ? NO

OR
Filter the elements n display filtered list.  : NO

Objective : Accept product category from user
remove all products from specified category n display remaining list : multiple ops can't be chained !


3. Enter Java 8 Functional Streams

Refer to <streams> : diagrams
collections vs streams n streams basics


 Refer to "streams_sequence"


Solve for more practice : 

3.1  Display all product names of a particular category , exceeding specific price.
I/P category name & price.
(stream,2 filters,forEach)


3.2  Prompt user for category n discount.
Apply that discount on all products of specified category n print it.
i/p : category n discount

3.3 Continue with your student based scenario.
1. Display all student details from a student list

2. Display all student details(list) sorted as per GPA 
Use custom ordering

3. Write a tester to print average of  gpa of students for the specified course/subject
eg : i/p : course
Course c=Course.valueOf(sc.next().toUpperCase());
OptionalDouble optional=studentList.stream().filter(s -> s.getCourse() == c).mapToDouble(s -> s.getGPA()).average();
if(optional.isPresent())
 sop("Avg="+optional.get());

4 Print name of specified subject  topper
Hint : studentList ---stream --filter --max(comp based on GPA)

5 Print no of  failures for the specified subject chosen  from user.
(gpa < 5 : failed case)
Hint : studentMap -- values---Collection<Student> ----stream --filter(subject/course)---filter(GPA) --count 

6. Display all student details from a student map
Hint --studentMap--forEach(k,v -> sop(k+" "+v));
---------------------------------
3.1  Display all product names of a particular category , exceeding specific price.
I/P category name & price.
(stream,2 filters,forEach)


3.2  Prompt user for category n discount.
Apply that discount on all products of specified category n print it.
i/p : category n discount

3.3 Continue with your student based scenario.
1. Display all student details from a student list

2. Display all student details(list) sorted as per GPA 
Use custom ordering

3. Write a tester to print average of  gpa of students for the specified course/subject
eg : i/p : course


4 Print name of specified subject  topper
Hint : studentList ---stream --filter --max(comp based on GPA)

5 Print no of  failures for the specified subject chosen  from user.
(gpa < 5 : failed case)
Hint : studentMap -- values---Collection<Student> ----stream --filter(subject/course)---filter(GPA) --count 

6. Display all student details from a student map









