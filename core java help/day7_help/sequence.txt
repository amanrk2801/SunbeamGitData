Today's Topics

Revise n continue with interfaces
Exception handling
String Handling
Date / Time Handling (legacy)
Method overloading question (based on ref type)



Revision

What is an interface ?
Prototype / blue print for a class.

Why Interfaces ?
1. pure abstraction
2. loose coupling
(separation between WHAT : specs vs HOW : implementation)
WHAT : i/f
HOW : imple classes
3. Helps to achieve multiple inheritance


Syntax
default/public interface InterfaceName extends i/f1,i/f2.....
{
  //data member : public static final
//method : public abstract
}

When to use extends keyword 
sub class extends super class
sub i/f extends multiple super i/fs

When to use implements  keyword  ?
class implements multiple i/fs 

Can a class implement multiple i/fs ? YES

Can a class extend from  multiple super classes ? NO

Can an i/f extend from  multiple super i/fs ? YES


Can you create i/f instance ? NO
i/f instance => implementation class instance

Can i/f ref DIRECTLY(w/o type casting)  refer to ANY  implemetation class instance ? YES
up casting 
eg : java.util.List : i/f
imple classes : ArrayList,LinkedList,Vector
List<Emp> list=new ArrayList<Emp>();
list=new Vector<Emp>();
list=new LinkedList<Emp>();

Printer myPrinter=new ConsolePrinter();//up casting : indirect ref.
myPrinter.print("some mesg!");//run time poly (=DMD)



Objectives
1. Create different type of Printers(ConsolePrinter, FilePrinter ,NetworkPrinter) n access it's common functionality n specific functionality in a single for-each loop.

2. Why Java does not allow multiple inheritance through classes ?
ambiguity (diamond problem)

What will happen with i/fs ?
Demo : Create a class implementing multiple i/fs .with duplicate behaviour ? : 
What about duplicate data members ?

3. Demo : 1 i/f extending multiple super i/fs , n then write imple class
In order to create concrete imple class : MUST imple all abstract func inherited from all of i/fs

Other than regular interfaces , Java supports

1. Nested i/f
eg : Map.Entry

2. Marker i/f : Empty (Tag i/f) i/f --NO data members n no methods
eg : Serializable , Cloneable

3. Functional i/f : i/f containing single abstract method (SAM)
eg : Predicate , Runnable ....

-----------------------

Enter Exception Handling : 
Refer : readme 

What is Exception ? : Run time error , detected by JVM (currently by main thread)

Why Exception handling ?
1. To allow the continuation of java app , even in case of run time errors.
2. Reduces the need for checking validation of ret types.
3. Allows a Separation between business logic n error handling


Flow , inheritance hierarchy , checked vs un checked excs
keywords : try, catch , finally , throw , throws , try-with-resources

Custom exceptions
Objective : Validate speed of running vehicle on a highway
min speed : 40
max speed : 80


In case of speed outside the range --Prog will have to detect the err --create instance of user defined exc class --explicitly throw custom exc to the code. The alteration in flow will be managed by JVM.


Steps
1.Create custom exception class : extends Throwable/Error/Exception/RuntimeExc....
eg : public class SpeedOutOfRangeException extends Exception{}
1.1  Add parameterized constr : to init err mesg

2. Create a separate class  eg :  ValidationUtils --
add a static method for validation of the speed

3. Create Tester : UI --scanner --accept the speed n simply call validateSpeed of the SpeedUtils  class
-------------------------

4. String Handling
4.1 Immutability of strings
4.2 == vs equals
4.3 literal vs non literal string
4.4 API
1. String class API

2. StringBuilder API

5.Date Time Handling (refer to : readme_strings_date_varargs.txt)

java.util.Date : represents Date n time both , till precision msec.
Constrs : 
Date() : Creates date class instance : current date n time 
Date(long msec) : Creates date class instance : that represents date n time , of msecs elapsed after Epoch(1st Jan 1970)
Methods : toString , before ,after,compareTo,equals
eg : d1.compareTo(d2) :  -1 => d1 before d2
0 => d1.equals (d2)
1 => d1 after d2
------------------------------------
Case study : Showroom management system.

Objective : Accept vehicle details : chasisNo(string) : unique: PK, color(string) , price(double) , manufactureDate(Date)

What is a relationship between Vehicle n chasisNo(string) : unique, color(string) , price(double) , manufactureDate(Date) ? HAS-A

How will you accept manufactureDate from user ?


Steps
1. Create instance of a class : java.text.SimpleDateFormat

2. Parsing (string --> Date) API 

3. Formatting API (Date --> string) 


var-args
refer to :  readme_strings_date_varargs.txt

